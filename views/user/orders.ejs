<%- include('../partials/user/header') %>
<div class="row">
    <%- include('../partials/user/sidebar')%>
    <div class="profile col-10">
        <main class="main-content">
            <div class="orders-container">
                <h2 class="orders-title">My Orders</h2>
                
                <% if (orders && orders.length > 0) { %>
                    <div class="orders-list">
                        <% orders.forEach(function(order) { %>
                            <div class="order-card">
                                <div class="order-header">
                                    <div class="order-info">
                                        <h3>Order #<%= order._id %></h3>
                                        <p class="order-date">Ordered on <%= new Date(order.orderDate).toLocaleDateString() %></p>
                                    </div>
                                    <div class="order-status <%= order.status.toLowerCase() %>">
                                        <%= order.status %>
                                    </div>
                                </div>

                                <div class="order-items">
                                    <% order.items.forEach(function(item) { %>
                                        <div class="order-item">
                                            <div class="item-image">
                                                <img src="/uploads/<%= item.productImage %>" alt="<%= item.productName %>">
                                            </div>
                                            <div class="item-details">
                                                <h4><%= item.productName %></h4>
                                                <p class="description"><%= item.productDescription %></p>
                                                <p>Quantity: <%= item.quantity %></p>
                                                <p>Price: ₹<%= item.price.toFixed(2) %></p>
                                                <p>Total: ₹<%= (item.price * item.quantity).toFixed(2) %></p>
                                            </div>
                                        </div>
                                    <% }); %>
                                </div>

                                <div class="order-footer">
                                    <div class="delivery-address">
                                        <h4>Delivery Address</h4>
                                        <p>
                                            <%= order.address.fullName %><br>
                                            <%= order.address.street %><br>
                                            <%= order.address.city %>, <%= order.address.state %><br>
                                            <%= order.address.pinCode %><br>
                                            Phone: <%= order.address.phone %>
                                        </p>
                                    </div>
                                    <div class="order-summary">
                                        <div class="summary-row">
                                            <span>Total Items:</span>
                                            <span><%= order.items.length %></span>
                                        </div>
                                        <div class="summary-row">
                                            <span>Payment Method:</span>
                                            <span><%= order.paymentMethod === 'cod' ? 'Cash on Delivery' : 'Online Payment' %></span>
                                        </div>
                                        <div class="summary-row">
                                            <span>Payment Status:</span>
                                            <span class="<%= order.paymentStatus.toLowerCase() %>">
                                                <%= order.paymentStatus %>
                                            </span>
                                        </div>
                                        <div class="summary-row total">
                                            <span>Total Amount:</span>
                                            <span>₹<%= order.totalAmount.toFixed(2) %></span>
                                        </div>
                                    </div>
                                    <div class="order-actions">
                                        <% if (order.status === 'Delivered') { %>
                                            <a href="/downloadInvoice/<%= order._id %>" class="btn btn-primary" target="_blank">
                                                <i class="fas fa-download"></i> Download Invoice
                                            </a>
                                        <% } %>
                                        <% if (order.paymentStatus === 'PaymentFailed') { %>
                                            <button onclick="retryPayment('<%= order._id %>', <%= order.totalAmount %>)" class="btn btn-warning">
                                                <i class="fas fa-redo"></i> Retry Payment
                                            </button>
                                        <% } else if (order.status === 'Pending' || order.status === 'Processing') { %>
                                            <button onclick="cancelOrder('<%= order._id %>')" class="btn cancel-btn">Cancel Order</button>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                <% } else { %>
                    <div class="no-orders">
                        <p>You haven't placed any orders yet.</p>
                    </div>
                <% } %>
            </div>
        </main>
    </div>
</div>

<!-- Custom Modal -->
<div id="customModal" class="custom-modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Success!</h3>
            <span class="close-modal">&times;</span>
        </div>
        <div class="modal-body">
            <p>Order cancelled successfully</p>
        </div>
    </div>
</div>

<style>
    .orders-container {
        padding: 2rem;
        max-width: 1200px;
        margin: 0 auto;
    }

    .orders-title {
        font-size: 1.8rem;
        color: #333;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e94560;
    }

    .order-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
        padding: 1.5rem;
    }

    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #eee;
    }

    .order-info h3 {
        margin: 0;
        color: #333;
        font-size: 1.2rem;
    }

    .order-date {
        color: #666;
        font-size: 0.9rem;
        margin: 0.5rem 0 0 0;
    }

    .order-status {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .order-status.pending {
        background: #fff3cd;
        color: #856404;
    }

    .order-status.processing {
        background: #cce5ff;
        color: #004085;
    }

    .order-status.shipped {
        background: #d4edda;
        color: #155724;
    }

    .order-status.delivered {
        background: #d1e7dd;
        color: #0f5132;
    }

    .order-status.cancelled {
        background: #f8d7da;
        color: #721c24;
    }

    .order-items {
        margin-bottom: 1.5rem;
    }

    .order-item {
        display: flex;
        align-items: center;
        padding: 1rem 0;
        border-bottom: 1px solid #eee;
    }

    .order-item:last-child {
        border-bottom: none;
    }

    .item-image {
        width: 80px;
        height: 80px;
        margin-right: 1rem;
    }

    .item-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 4px;
    }

    .item-details h4 {
        margin: 0 0 0.5rem 0;
        font-size: 1rem;
        color: #333;
    }

    .item-details p {
        margin: 0;
        font-size: 0.9rem;
        color: #666;
    }

    .order-footer {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid #eee;
    }

    .delivery-address h4, .order-summary h4 {
        font-size: 1rem;
        color: #333;
        margin-bottom: 0.8rem;
    }

    .delivery-address p {
        font-size: 0.9rem;
        color: #666;
        line-height: 1.6;
        margin: 0;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
        color: #666;
    }

    .summary-row.total {
        font-weight: bold;
        color: #333;
        font-size: 1.1rem;
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid #eee;
    }

    .order-actions {
        display: flex;
        gap: 1rem;
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid #eee;
    }

    .btn {
        padding: 0.8rem 1.5rem;
        border: none;
        border-radius: 6px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
    }

    .track-btn {
        background: #e94560;
        color: white;
    }

    .details-btn {
        background: #f8f9fa;
        color: #333;
        border: 1px solid #dee2e6;
    }

    .cancel-btn {
        background: #dc3545;
        color: white;
    }

    .btn:hover {
        opacity: 0.9;
    }

    .no-orders {
        text-align: center;
        padding: 3rem;
    }

    .empty-cart-message {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }

    .empty-cart-message i {
        font-size: 4rem;
        color: #e94560;
    }

    .empty-cart-message h3 {
        font-size: 1.5rem;
        color: #333;
        margin: 0;
    }

    .empty-cart-message p {
        color: #666;
        margin: 0;
    }

    .shop-now-btn {
        background: #e94560;
        color: white;
        text-decoration: none;
        margin-top: 1rem;
    }

    .shop-now-btn:hover {
        background: #d83a6f;
    }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 0.3rem;
        margin-top: 1.5rem;
        padding: 0.5rem;
        font-size: 0.9rem;
    }

    .page-link {
        padding: 0.4rem 0.7rem;
        min-width: 2rem;
        text-align: center;
        border: 1px solid #dee2e6;
        color: #e94560;
        text-decoration: none;
        border-radius: 4px;
        transition: all 0.2s;
        font-size: 0.9rem;
    }

    .page-link:hover {
        background-color: #f8f9fa;
        color: #d83a6f;
    }

    .page-link.active {
        background-color: #e94560;
        color: white;
        border-color: #e94560;
    }

    .page-dots {
        color: #6c757d;
        padding: 0 0.3rem;
    }

    .page-link.prev,
    .page-link.next {
        background-color: white;
        font-weight: bold;
    }

    .custom-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        animation: fadeIn 0.3s;
    }

    .custom-modal .modal-content {
        position: relative;
        background-color: #fff;
        margin: 15% auto;
        padding: 0;
        width: 400px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        animation: slideIn 0.3s;
    }

    .modal-header {
        padding: 15px 20px;
        background-color: #e94560;
        color: white;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-body {
        padding: 20px;
        text-align: center;
    }

    .close-modal {
        color: white;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .close-modal:hover {
        color: #f1f1f1;
    }

    @keyframes fadeIn {
        from {opacity: 0}
        to {opacity: 1}
    }

    @keyframes slideIn {
        from {transform: translateY(-100px); opacity: 0}
        to {transform: translateY(0); opacity: 1}
    }

    @media (max-width: 768px) {
        .order-footer {
            grid-template-columns: 1fr;
        }

        .order-actions {
            flex-direction: column;
        }

        .btn {
            width: 100%;
        }

        .pagination {
            gap: 0.2rem;
        }

        .page-link {
            padding: 0.3rem 0.6rem;
            font-size: 0.85rem;
        }
    }

    .btn-primary {
        background-color: #007bff;
        color: white !important;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: background-color 0.2s;
    }

    .btn-primary:hover {
        background-color: #0056b3;
        text-decoration: none;
    }

    .btn-primary i {
        font-size: 1rem;
    }
</style>
<link href="https://cdn.razorpay.com/static/assets/razorpay-checkout.css" rel="stylesheet">
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    async function cancelOrder(orderId) {
        if (confirm('Are you sure you want to cancel this order?')) {
            try {
                const response = await fetch(`/cancelOrder/${orderId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Show custom modal
                    const modal = document.getElementById('customModal');
                    modal.style.display = 'block';
                    
                    // Close modal when clicking the close button
                    const closeBtn = document.querySelector('.close-modal');
                    closeBtn.onclick = function() {
                        modal.style.display = 'none';
                        location.reload();
                    }
                    
                    // Close modal when clicking outside
                    window.onclick = function(event) {
                        if (event.target == modal) {
                            modal.style.display = 'none';
                            location.reload();
                        }
                    }
                    
                    // Auto close after 2 seconds
                    setTimeout(() => {
                        modal.style.display = 'none';
                        location.reload();
                    }, 2000);
                } else {
                    alert(data.message || 'Failed to cancel order');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while cancelling the order');
            }
        }
    }

    async function retryPayment(orderId, amount) {
        try {
            const razorpayOrder = await fetch('/razorpay/createOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    orderId: orderId
                })
            });

            const orderRazorpay = await razorpayOrder.json();
            
            if (orderRazorpay.success) {
                const options = {
                    key: orderRazorpay.key,
                    amount: orderRazorpay.order.amount,
                    currency: "INR",
                    name: "Book Store",
                    description: "Retry Payment for Order",
                    order_id: orderRazorpay.order.id,
                    handler: async function (response) {
                        try {
                            const verifyResponse = await fetch('/razorpay/verify', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderId: orderId
                                })
                            });
                            
                            const verifyResult = await verifyResponse.json();
                            
                            if (verifyResult.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: "Payment Successful",
                                    text: "Your payment has been processed successfully",
                                    showConfirmButton: true,
                                    confirmButtonText: "OK",
                                    allowOutsideClick: false
                                }).then(() => {
                                    window.location.reload();
                                });
                            } else {
                                throw new Error(verifyResult.error || 'Payment verification failed');
                            }
                        } catch (error) {
                            console.error('Error verifying payment:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Verification Failed',
                                text: error.message || 'There was an issue verifying your payment.',
                                showConfirmButton: true
                            });
                        }
                    },
                    prefill: {
                        name: "<%= user?.name %>",
                        email: "<%= user?.email %>"
                    },
                    theme: {
                        color: "#e94560"
                    },
                    modal: {
                        ondismiss: async function() {
                            const verifyResponse = await fetch('/razorpay/verify', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    orderId: orderId
                                })
                            });
                            const verifyResult = await verifyResponse.json();
                            
                            Swal.fire({
                                icon: 'warning',
                                title: 'Payment Incomplete',
                                text: 'Your payment was not completed. You can try the payment again.',
                                showConfirmButton: true
                            }).then(() => window.location.reload());
                        }
                    }
                };
                
                const rzp = new Razorpay(options);
                rzp.open();
                
                rzp.on('payment.failed', async function(response) {
                    const verifyResponse = await fetch('/razorpay/verify', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            orderId: orderId
                        })
                    });
                    const verifyResult = await verifyResponse.json();
                    
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Failed',
                        text: verifyResult.message || 'The payment process failed. Please try again.',
                        showConfirmButton: true
                    }).then(() => window.location.reload());
                });

                rzp.on('modal.closed', async function() {
                    const verifyResponse = await fetch('/razorpay/verify', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            orderId: orderId
                        })
                    });
                    const verifyResult = await verifyResponse.json();
                    
                    if (!verifyResult.success) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Payment Incomplete',
                            text: 'Your payment was not completed. You can try the payment again.',
                            showConfirmButton: true
                        }).then(() => window.location.reload());
                    }
                });
            } else {
                throw new Error(orderRazorpay.error || 'Failed to create payment order');
            }
        } catch (error) {
            console.error('Error initiating payment:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to initiate payment. Please try again.',
                showConfirmButton: true
            });
        }
    }
</script>

<%- include('../partials/user/footer') %>
