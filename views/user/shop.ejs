<%- include('../partials/user/header', { user: user }) %>

<div class="container-fluid py-5" style="background-color: #f5f5f5;">
    <div class="container">
        <div class="row">
            <!-- Sidebar with filters -->
            <div class="col-lg-3">
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-body">
                        <h5 class="mb-4" style="color: #e94560;">Categories</h5>
                        <div class="categories-list">
                            <% if (categories && categories.length > 0) { %>
                                <% categories.forEach(category => { %>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" value="<%= category._id %>" id="category<%= category._id %>">
                                        <label class="form-check-label" for="category<%= category._id %>">
                                            <%= category.name %>
                                        </label>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <p>No categories available</p>
                            <% } %>
                        </div>

                        <h5 class="mb-4 mt-4" style="color: #e94560;">Price Range</h5>
                        <div class="price-range mb-4">
                            <input type="range" class="form-range" min="0" max="5000" id="priceRange">
                            <div class="d-flex justify-content-between mt-2">
                                <span>₹0</span>
                                <span id="priceValue">₹2500</span>
                                <span>₹5000</span>
                            </div>
                        </div>
                        <button class="btn w-100" style="background-color: #a62d43; color: white;" onclick="applyFilters()">
                            Apply Filters
                        </button>
                    </div>
                </div>
            </div>

            <!-- Product grid -->
            <div class="col-lg-9">
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
                            <h4 style="color: #e94560;">All Books</h4>
                            <div class="search-box">
                                <!-- <i class="fas fa-search search-icon"></i> -->
                                <input type="text" id="searchInput" placeholder="Search books..." class="search-input">
                            </div>
                            <div class="d-flex align-items-center">
                                <span class="me-2">Sort by:</span>
                                <select id="sortSelect" class="form-select" style="width: auto;">
                                    <option value="">Select</option>
                                    <option value="featured">Featured</option>
                                    <option value="rating">Average Rating: High to Low</option>
                                    <option value="new_arrivals">New Arrivals</option>
                                    <option value="popularity">Popularity</option>
                                    <option value="price_asc">Price: Low to High</option>
                                    <option value="price_desc">Price: High to Low</option>
                                    <option value="name_asc">Name: A to Z</option>
                                    <option value="name_desc">Name: Z to A</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row g-4" id="productsGrid">
                    <% if (products && products.length > 0) { %>
                        <% products.forEach(product => { %>
                            <div class="col-md-4 col-sm-6">
                                <div class="card product-card border-0 shadow-sm h-100">
                                    <a href="/productDetails/?id=<%= product._id %>" class="text-decoration-none">
                                        <img src="/uploads/<%= product.productImage[0] %>" class="card-img-top" alt="<%= product.productName %>" style="height: 200px; object-fit: cover;">
                                    </a>
                                    <div class="card-body d-flex flex-column">
                                        <a href="/productDetails/?id=<%= product._id %>" class="text-decoration-none">
                                            <h5 class="card-title" style="color: #e94560;"><%= product.productName %></h5>
                                        </a>
                                        <p class="card-text mb-2">By <%= product.description || 'Unknown description' %></p>
                                        <div class="mt-auto">
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <div>
                                                    <p class="mb-0"><strike class="text-primary">₹<%= product.regularPrice %></strike></p>
                                                    <h5 class="text-primary mb-0">₹<%= product.salePrice %></h5>
                                                </div>
                                                <div class="d-flex gap-2">
                                                    <button class="btn btn-outline-danger btn-sm wishlist-btn" onclick="event.preventDefault(); handleWishlist('<%= product._id %>', this)">
                                                        <i class="fas fa-heart"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            <!-- <div>
                                                <%=(((product.regularPrice - product.salePrice)/product.regularPrice)*100).toFixed(2) + '% Offer' %> 
                                            </div> -->
                                            <div class="d-flex gap-2">
                                                <button class="btn btn-outline-primary flex-grow-1 add-to-cart-btn" onclick="event.preventDefault(); addToCart('<%= product._id %>')">
                                                    <i class="fas fa-shopping-cart me-1"></i> Add to Cart
                                                </button>
                                                <button class="btn btn-primary flex-grow-1 buy-now-btn" onclick="event.preventDefault(); buyNow('<%= product._id %>')">
                                                    <i class="fas fa-bolt me-1"></i> Buy Now
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="col-12 text-center">
                            <p>No products found</p>
                        </div>
                    <% } %>
                </div>

                <!-- Pagination -->
                <% if (totalPages > 1) { %>
                    <nav aria-label="Shop pagination" class="mt-5">
                        <ul class="pagination justify-content-center">
                            <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                                <a class="page-link" href="/user/shop/<%= currentPage - 1 %>" <%= currentPage === 1 ? 'tabindex="-1" aria-disabled="true"' : '' %>>Previous</a>
                            </li>
                            
                            <% for(let i = 1; i <= totalPages; i++) { %>
                                <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                    <a class="page-link" href="/user/shop/<%= i %>"><%= i %></a>
                                </li>
                            <% } %>
                            
                            <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                                <a class="page-link" href="/user/shop/<%= currentPage + 1 %>" <%= currentPage === totalPages ? 'tabindex="-1" aria-disabled="true"' : '' %>>Next</a>
                            </li>
                        </ul>
                    </nav>
                <% } %>
            </div>
        </div>
    </div>
</div>

<style>
    /* Product Card Styles */
    
    .product-card {
        transition: all 0.3s ease;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1) !important;
    }

    .add-to-cart-btn, .buy-now-btn {
        padding: 8px 10px;
        font-size: 0.9rem;
        font-weight: 500;
        transition: all 0.3s ease;
        border-radius: 6px;
    }

    .add-to-cart-btn {
        background-color: transparent;
        border: 2px solid #e94560;
        color: #e94560;
    }

    .add-to-cart-btn:hover {
        background-color: #e94560;
        border-color: #e94560;
        color: white;
        transform: translateY(-2px);
    }

    .buy-now-btn {
        background: linear-gradient(135deg, #e94560, #d83a6f);
        border: none;
        color: white;
    }

    .buy-now-btn:hover {
        background: linear-gradient(135deg, #d83a6f, #e94560);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(233, 69, 96, 0.2);
    }

    .wishlist-btn {
        width: 35px;
        height: 35px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        border: 2px solid #e94560;
        color: #e94560;
        background-color: white;
        transition: all 0.3s ease;
        position: relative;
        z-index: 10;
    }

    .wishlist-btn i {
        font-size: 1rem;
    }

    .wishlist-btn i::before {
        content: "\f004";  
    }

    .wishlist-btn.active {
        background-color: #e94560;
        color: white;
    }

    .wishlist-btn.active i::before {
        content: "\f004";  
    }

    .wishlist-btn:hover {
        transform: scale(1.1);
        box-shadow: 0 4px 8px rgba(233, 69, 96, 0.2);
    }

    /* Heart beat animation */
    @keyframes heartBeat {
        0% { transform: scale(1); }
        15% { transform: scale(1.25); }
        30% { transform: scale(1); }
        45% { transform: scale(1.25); }
        60% { transform: scale(1); }
    }

    .heart-beat {
        animation: heartBeat 1s ease-in-out;
    }

    /* Make product links not look like links */
    a.col-md-4 {
        text-decoration: none;
        color: inherit;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
        .add-to-cart-btn, .buy-now-btn {
            padding: 6px 12px;
            font-size: 0.8rem;
        }
    }

    /* Pagination Styles */
    .pagination {
        margin: 2rem 0;
        gap: 5px;
    }

    .page-item {
        margin: 0 2px;
    }

    .page-link {
        color: #333;
        background-color: #f8f9fa;
        border: 2px solid #e9ecef;
        padding: 8px 16px;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .page-link:hover {
        color: #fff;
        background: linear-gradient(135deg, #e94560, #d83a6f);
        border-color: #d83a6f;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(233, 69, 96, 0.2);
    }

    .page-item.active .page-link {
        color: #fff;
        background: linear-gradient(135deg, #e94560, #d83a6f);
        border-color: #d83a6f;
        box-shadow: 0 4px 12px rgba(233, 69, 96, 0.3);
    }

    .page-item.disabled .page-link {
        color: #adb5bd;
        background-color: #f8f9fa;
        border-color: #e9ecef;
        pointer-events: none;
        opacity: 0.7;
    }

    /* Previous/Next buttons special styling */
    .page-item:first-child .page-link,
    .page-item:last-child .page-link {
        background: linear-gradient(135deg, #ffffff, #f8f9fa);
        color: #e94560;
        font-weight: 600;
        min-width: 100px;
        text-align: center;
    }

    .page-item:first-child .page-link:hover,
    .page-item:last-child .page-link:hover {
        background: linear-gradient(135deg, #e94560, #d83a6f);
        color: #fff;
    }

    /* Add pulse animation to active page */
    @keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(233, 69, 96, 0.4);
        }
        70% {
            box-shadow: 0 0 0 10px rgba(233, 69, 96, 0);
        }
        100% {
            box-shadow: 0 0 0 0 rgba(233, 69, 96, 0);
        }
    }

    .page-item.active .page-link {
        animation: pulse 2s infinite;
    }

    /* Responsive adjustments */
    @media (max-width: 576px) {
        .pagination {
            gap: 3px;
        }

        .page-link {
            padding: 6px 12px;
            font-size: 0.9rem;
        }

        .page-item:first-child .page-link,
        .page-item:last-child .page-link {
            min-width: 80px;
        }
    }

    .text-truncate-multiline {
  display: -webkit-box;
  line-clamp: 3;
  -webkit-line-clamp: 3; /* Change this number to limit lines */
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  max-height: 4.5em; /* Adjust based on font-size */
}
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Price range slider
    const priceRange = document.getElementById('priceRange');
    const priceValue = document.getElementById('priceValue');
    const searchInput = document.getElementById('searchInput')
    const sortSelect = document.getElementById('sortSelect');

    priceRange.addEventListener('input', function() {
        priceValue.textContent = `₹${this.value}`;
    });

    sortSelect.addEventListener('change', function() {
        console.log('Sort value:', this.value);
        applyFilters();
    });

    async function applyFilters() {
        const selectedCategories = Array.from(document.querySelectorAll('.form-check-input:checked'))
            .map(checkbox => checkbox.value);
        
        const filters = {
            categories: selectedCategories,
            maxPrice: priceRange.value,
            sort: sortSelect.value
        };

        console.log('Sending filters:', filters);

        try {
            const response = await fetch('/user/filter-products', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(filters)
            });

            const data = await response.json();
            if (data.success) {
                updateProductGrid(data.products);
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: data.message || 'Something went wrong!'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Failed to apply filters'
            });
        }
    }

    function updateProductGrid(products) {
        const productGrid = document.querySelector('.row.g-4');
        if (!productGrid) return;

        let html = '';
        products.forEach(product => {
            html += `
                <div class="col-md-4 col-sm-6">
                    <div class="card product-card border-0 shadow-sm h-100">
                        <a href="/productDetails/?id=${product._id}" class="text-decoration-none">
                            <img src="/uploads/${product.productImage[0]}" class="card-img-top" alt="${product.productName}" style="height: 200px; object-fit: cover;">
                        </a>
                        <div class="card-body d-flex flex-column">
                            <a href="/productDetails/?id=${product._id}" class="text-decoration-none">
                                <h5 class="card-title" style="color: #e94560;">${product.productName}</h5>
                            </a>
                            <p class="card-text mb-2 text-truncate-multiline">${product.description || 'Unknown description'}</p>
                            <div class="mt-auto">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <div>
                                        <p class="mb-0"><strike class="text-muted">₹${product.regularPrice}</strike></p>
                                        <h5 class="text-primary mb-0">₹${product.salePrice}</h5>
                                    </div>
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-outline-danger btn-sm wishlist-btn" onclick="event.preventDefault(); handleWishlist('${product._id}', this)">
                                            <i class="fas fa-heart"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-outline-primary flex-grow-1 add-to-cart-btn" onclick="event.preventDefault(); addToCart('${product._id}')">
                                        <i class="fas fa-shopping-cart me-1"></i> Add to Cart
                                    </button>
                                    <button class="btn btn-primary flex-grow-1 buy-now-btn" onclick="event.preventDefault(); buyNow('${product._id}')">
                                        <i class="fas fa-bolt me-1"></i> Buy Now
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });

        productGrid.innerHTML = html;
    }

    // Add to cart function
    async function addToCart(productId) {
        try {
            const response = await fetch('/addToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ 
                    id: productId,
                    quantity: 1
                })
            });
            const data = await response.json();
            if (data.success) {
                if (data.cartCount !== undefined) {
                    const cartCountElements = document.querySelectorAll('.cart-count');
                    cartCountElements.forEach(element => {
                        const formattedCount = data.cartCount.toString().padStart(2, '0');
                        element.textContent = `(${formattedCount})`;
                    });
                }
                Swal.fire({
                    position: "center",
                    icon: "success",
                    title: data.message || 'Product added to cart!',
                    showConfirmButton: true,
                    confirmButtonText: 'Go to Cart',
                    showCancelButton: true,
                    cancelButtonText: 'Continue Shopping',
                    timer: 3000
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/user/cart';
                    }
                });
            } else {
                if (response.status === 401) {
                    // User is not logged in
                    Swal.fire({
                        icon: "info",
                        title: "Please Login",
                        text: "You need to login to add items to cart",
                        showConfirmButton: true,
                        confirmButtonText: 'Login',
                        showCancelButton: true,
                        cancelButtonText: 'Continue Shopping'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/login';
                        }
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Cannot Add to Cart",
                        text: data.message || 'Failed to add product to cart',
                        showConfirmButton: true,
                        confirmButtonText: 'OK'
                    });
                }
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: "error",
                title: "Error!",
                text: "Something went wrong. Please try again.",
                showConfirmButton: true,
                confirmButtonText: 'OK'
            });
        }
    }

    async function buyNow(productId) {
        try {
            // First add to cart
            const response = await fetch('/addToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'},
                body: JSON.stringify({ id: productId,quantity: 1})
            });

            const data = await response.json();

            if (data.success) {
                // Redirect to cart page
                window.location.href = '/user/cart';
            } else {
                Swal.fire({
                    icon: "error",
                    title: "Cannot Buy Now",
                    text: data.message || 'Failed to process buy now request',
                    showConfirmButton: true,
                    confirmButtonText: 'OK'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: "error",
                title: "Error!",
                text: "Something went wrong! Please try again.",
                showConfirmButton: true,
                confirmButtonText: 'OK'
            });
        }
    }

    // Function to handle wishlist actions
    async function handleWishlist(productId, button) {
        try {
            const isInWishlist = button.classList.contains('active');
            const endpoint = isInWishlist ? '/removeFromWishlist' : '/addToWishlist';
            const method = isInWishlist ? 'DELETE' : 'POST';

            const response = await fetch(endpoint, {
                method: method,
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ productId: productId })
            });

            const data = await response.json();

            if (data.success) {
                // Toggle active class
                button.classList.toggle('active');
                
                // Add heart beat animation
                button.classList.add('heart-beat');
                setTimeout(() => button.classList.remove('heart-beat'), 1000);

                // Show success message
                Swal.fire({
                    position: 'center',
                    icon: 'success',
                    title: isInWishlist ? 'Product Removed from Wishlist!' : 'Product Added to Wishlist!',
                    showConfirmButton: true,
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#28a745'
                });
            } else {
                throw new Error(data.message || 'Failed to update wishlist');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                position: 'center',
                icon: 'error',
                title: 'Oops...',
                text: error.message || 'Something went wrong!',
                showConfirmButton: true,
                confirmButtonText: 'OK',
                confirmButtonColor: '#e94560'
            });
        }
    }

    // Function to check and update initial wishlist states
    async function checkWishlistStates() {
        try {
            const response = await fetch('/wishlist');
            const data = await response.json();
            
            if (data && data.wishlistItems) {
                const wishlistIds = new Set(data.wishlistItems.map(item => item._id));
                
                // Update all wishlist buttons
                document.querySelectorAll('.wishlist-btn').forEach(button => {
                    const productId = button.getAttribute('onclick').match(/'([^']+)'/)[1];
                    if (wishlistIds.has(productId)) {
                        button.classList.add('active');
                    }
                });
            }
        } catch (error) {
            console.error('Error checking wishlist states:', error);
        }
    }

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
        checkWishlistStates();
    });

    async function searchBooks() {
        const searchTerm = document.getElementById('searchInput').value.trim();
        if (!searchTerm) return;

        const productsGrid = document.getElementById('productsGrid');
        productsGrid.style.opacity = '0.5';

        fetch(`/user/search-products?query=${encodeURIComponent(searchTerm)}`)
            .then(response => response.json())
            .then(data => {
                productsGrid.innerHTML = '';
                
                if (data.products && data.products.length > 0) {
                    data.products.forEach(product => {
                        const productCard = `
                            <div class="col-md-4 col-sm-6">
                                <div class="card product-card border-0 shadow-sm h-100">
                                    <a href="/productDetails/?id=${product._id}" class="text-decoration-none">
                                        <img src="/uploads/${product.productImage[0]}" class="card-img-top" alt="${product.productName}" style="height: 200px; object-fit: cover;">
                                    </a>
                                    <div class="card-body d-flex flex-column">
                                        <a href="/productDetails/?id=${product._id}" class="text-decoration-none">
                                            <h5 class="card-title" style="color: #e94560;">${product.productName}</h5>
                                        </a>
                                        <p class="card-text mb-2">${product.description || 'Unknown description'}</p>
                                        <div class="mt-auto">
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <div>
                                                    <p class="mb-0"><strike class="text-muted">₹${product.regularPrice}</strike></p>
                                                    <h5 class="text-primary mb-0">₹${product.salePrice}</h5>
                                                </div>
                                                <div class="d-flex gap-2">
                                                    <button class="btn btn-outline-primary btn-sm add-to-cart" data-product-id="${product._id}">
                                                        <i class="fas fa-shopping-cart"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger btn-sm wishlist-btn" data-product-id="${product._id}">
                                                        <i class="fas fa-heart"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                        productsGrid.innerHTML += productCard;
                    });
                } else {
                    productsGrid.innerHTML = `
                        <div class="col-12 text-center mt-4">
                            <div class="alert alert-info">
                                No books found matching your search.
                            </div>
                        </div>
                    `;
                }
                productsGrid.style.opacity = '1';
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to search products'
                });
                productsGrid.style.opacity = '1';
            });
    }

    // Add event listener for Enter key
    document.getElementById('searchInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            searchBooks();
        }
    });

    // Add debounced search for real-time results
    let searchTimeout;
    document.getElementById('searchInput').addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(searchBooks, 500);
    });
</script>

<%- include('../partials/user/footer', { user: user }) %>
