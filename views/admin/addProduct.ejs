<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product - Booklove</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
 
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f7f7f7;
            overflow-y: scroll;
            text-align: left;
        }

        .content-main {
            padding: 20px;
            margin: 0 ;
            max-width: 1200px;
        }

        .content-header {
            text-align: left;
            margin-bottom: 30px;
        }

        .content-header h1 {
            color: #333;
        }

        .form-container {
            display: grid;
            grid-template-columns: 1fr 1fr; /* Two equal halves */
            gap: 20px; 
            margin-top: 20px;
        }

        .left-section,
        .right-section {
            display: flex;
            flex-direction: column;
            gap: 25px;
        }

        .card {
            background: #fff;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .card h3 {
            margin-bottom: 15px;
            color: #a42550;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            font-weight: bold;
            display: block;
            margin-bottom: 5px;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 10px;
            font-size: 14px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 100px;
        }

        .image-upload-container {
            display: flex;
            flex-wrap: wrap;
            /* gap: 10px; */
        }

        .image-preview {
            width: 120px;
            height: 120px;
            border: 1px solid #ddd;
            border-radius: 5px;
            display: flex;
            justify-content: center;
            align-items: center;
            background: #f5f5f5;
            overflow: hidden;
        }

        .image-preview img {
            max-width: 100%;
            max-height: 100%;
        }

        .btn-primary {
            background: #4a90e2;
            color: #fff;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            display: block;
            width: 100%;
            text-align: center;
        }

        .btn-primary:hover {
            background: #357abd;
        }
        body {
    font-family: 'Arial', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f7f7f7;
    overflow: hidden; 
}

.content-main {
    padding: 20px;
    margin: 0 auto;
    max-width: 1200px;
    max-height: 100vh; 
    overflow-y: auto; 
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.form-container {
    display: grid;
    grid-template-columns: 1fr 1fr; /* Two equal halves */
    gap: 20px;
    margin-top: 20px;
}
.save-btn {
    display: block;
    margin: 5px;
    padding: 4px 8px;
    background-color: #4a90e2;
    color: #fff;
    border: none;
    border-radius: 3px;
    cursor: pointer;
    font-size: 12px;
}

.save-btn:hover {
    background-color: #357abd;
}
.image-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 120px;
    margin: 5px;
}

.image-preview {
    width: 120px;
    height: 120px;
    border: 1px solid #ddd;
    border-radius: 5px;
    display: flex;
    justify-content: center;
    align-items: center;
    background: #f5f5f5;
    overflow: hidden;
}

.button-group {
    display: flex;
    justify-content: space-between;
    width: 100%;
    margin-top: 5px;
}

.button-group button {
    padding: 4px 6px;
    background-color: #4a90e2;
    color: #fff;
    border: none;
    border-radius: 3px;
    cursor: pointer;
    font-size: 12px;
    flex: 1;
    margin: 0 2px;
}

.button-group button.delete-btn {
    background-color: #e94e4e;
}

.button-group button:hover {
    opacity: 0.9;
}

    </style>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</head>
<body>
<%- include("../../views/partials/admin/header") %>
<section class="content-main">
    <div class="content-header">
        <h1>Add New Product</h1>
    </div>
    <form method="post"  enctype="multipart/form-data" id="addProductForm" onsubmit="return false">
        <div class="form-container">
            <!-- Left Section -->
            <div class="left-section">
                <!-- General Info Section -->
                <div class="card">
                    <h3>General Info</h3>
                    <div class="form-group">
                        <label for="productName">Product Name</label>
                        <input 
                            type="text" 
                            id="productName" 
                            name="productName" 
                            placeholder="Enter product name" 
                            required 
                            minlength="3" 
                            maxlength="50" 
                            pattern="[A-Za-z0-9 ]+"
                            title="Product name should only contain letters, numbers, and spaces, and be between 3 and 50 characters long.">
                    </div>
                    <div id="productNameError" style="color: red; font-size: 12px;"></div>
                    <div class="form-group">
                        <label for="description">Description</label>
                        <textarea id="description" name="description" placeholder="Enter product description"></textarea>
                        <div id="descriptionError" class="text-danger"></div>
                    </div>
                </div>

                <!-- Category Section -->
                <div class="card">
                    <h3>Category</h3>
                    <div class="form-group">
                        <label for="category">Select Category</label>
                        <select id="category" name="category" required>
                            <option value="">Select a Category</option>
                            <% for (let i = 0; i < cat.length; i++) { %>
                                <option value="<%= cat[i].id %>"><%= cat[i].name %></option>
                            <% } %>
                        </select>
                        <div id="categoryError" class="text-danger"></div>
                    </div>
                </div>
                
                <!-- Stock Section -->
                <div class="card">
                    <h3>Stock</h3>
                    <div class="form-group">
                        <label for="stock">Available Quantity</label>
                        <input type="text" id="stock" name="Quantity" placeholder="Enter stock quantity" required>
                        <div id="stockError" class="text-danger"></div>
                    </div>
                </div>
            </div>
            <!-- Right Section -->
            <div class="right-section">
                <!-- Media Section -->
                <div class="card">
                    <h3>Media</h3>
                    <div class="image-upload-container">
                        <% for (let i = 0; i < 4; i++) { %>
                        <div class="image-container">
                            <div class="image-preview" id="previewContainer<%= i %>">
                                <span>Add Image</span>
                            </div>
                            <input type="file" name="images" multiple id="imageInput<%= i %>" accept="image/*" style="display: none;">
                            <div class="button-group">
                                <!-- <button type="button" class="save-btn" onclick="handleSave('<%= i %>')">Save</button> -->
                                <button type="button" class="delete-btn" onclick="handleDelete('<%= i %>')">Delete</button>
                            </div>
                        </div>
                        <% } %>
                    </div>
                </div>
                <!-- Publication Listing Section -->
                <div class="card">
                    <h3>Publication</h3>
                    <div class="form-group">
                        <label for="publication">Select Publication</label>
                        <select id="publication" name="publication" required>
                            <option value="">Select a Publication</option>
                            <% for (let i = 0; i < pub.length; i++) { %>
                                <option value="<%= pub[i].id %>"><%= pub[i].name %></option>
                            <% } %>
                        </select>
                        <div id="publicationError" class="text-danger"></div>
                    </div>
                </div>
                
                <!-- Pricing Section -->
                <div class="card">
                    <h3>Pricing</h3>
                    <div class="form-group">
                        <label for="regularPrice">Regular Price</label>
                        <input type="number" id="regularPrice" name="regularPrice" placeholder="Enter regular price" required min="0" step="0.01">
                        <div id="regularPriceError" class="text-danger"></div>
                    </div>
                    <div class="form-group">
                        <label for="salePrice">Sale Price (Optional)</label>
                        <input type="number" id="salePrice" name="salePrice" placeholder="Enter sale price" min="0" step="0.01">
                        <div id="salePriceError" class="text-danger"></div>
                    </div>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn-primary">Add Product</button>
                </div>
            </div>
        </div>
    </form>
</section>

<!-- Cropper Modal -->
<div id="cropperModal">
    <div class="modal-content">
        <img id="cropperImage" alt="Crop Image">
        <div class="modal-buttons">
            <button class="btn-primary" id="cropSaveBtn">Save</button>
            <button class="btn-primary" id="cropCancelBtn">Cancel</button>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>

 const maxImages = 4;
    let cropper = null;
    let currentImageIndex = null;

    for (let i = 0; i < maxImages; i++) {
        const previewContainer = document.getElementById(`previewContainer${i}`);
        const imageInput = document.getElementById(`imageInput${i}`);

        previewContainer.addEventListener('click', () => imageInput.click());
        imageInput.addEventListener('change', (event) => handleFileChange(event, i));
    } 

    const cropperModal = document.getElementById('cropperModal');
    const cropperImage = document.getElementById('cropperImage');
    const cropSaveBtn = document.getElementById('cropSaveBtn');
    const cropCancelBtn = document.getElementById('cropCancelBtn');

    function handleFileChange(event, index) {

        const file = event.target.files[0];
        
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                cropperImage.src = e.target.result;
                
                openCropperModal(index);
            };
            reader.readAsDataURL(file);
        }
    }

    function openCropperModal(index) {
        currentImageIndex = index;
        cropperModal.style.display = 'flex';
        if (cropper) cropper.destroy();
        cropper = new Cropper(cropperImage, {
            aspectRatio: 4/5,
            viewMode: 1,
        });
    }

    cropSaveBtn.addEventListener('click', () => {
    const croppedCanvas = cropper.getCroppedCanvas();

    if (!croppedCanvas) return;

    croppedCanvas.toBlob((blob) => {
        const file = new File([blob], `cropped-image-${currentImageIndex}.png`, { type: "image/png" });

        const imageInput = document.getElementById(`imageInput${currentImageIndex}`);
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        imageInput.files = dataTransfer.files;

        const previewContainer = document.getElementById(`previewContainer${currentImageIndex}`);
        previewContainer.innerHTML = `<img src="${URL.createObjectURL(file)}" alt="Cropped Image">`;

        closeCropperModal();
    }, "image/png");
    });

    cropCancelBtn.addEventListener('click', closeCropperModal);
    function closeCropperModal() {
        cropperModal.style.display = 'none';
        if (cropper) cropper.destroy();
    }

    function handleDelete(index) {
        const previewContainer = document.getElementById(`previewContainer${index}`);
        previewContainer.innerHTML = `<span>Add Image</span>`;
        alert(`Image ${index + 1} deleted!`);
    }

    // Form validation
    const form = document.querySelector('form');
    const productName = document.getElementById('productName');
    const description = document.getElementById('description');
    const category = document.getElementById('category');
    const stock = document.getElementById('stock');
    const publication = document.getElementById('publication');
    const regularPrice = document.getElementById('regularPrice');
    const salePrice = document.getElementById('salePrice');

    // Error message elements
    const errorElements = {
        productName: document.getElementById('productNameError'),
        description: document.getElementById('descriptionError'),
        category: document.getElementById('categoryError'),
        stock: document.getElementById('stockError'),
        publication: document.getElementById('publicationError'),
        regularPrice: document.getElementById('regularPriceError'),
        salePrice: document.getElementById('salePriceError')
    };

    // Validation rules
    const validations = {
        productName: {
            required: true,
            minLength: 3,
            maxLength: 50,
            pattern: /^[A-Za-z0-9 ]+$/,
            message: 'Product name should only contain letters, numbers, and spaces (3-50 characters)'
        },
        description: {
            required: true,
            minLength: 10,
            maxLength: 500,
            message: 'Description must be between 10 and 500 characters'
        },
        category: {
            required: true,
            message: 'Please select a category'
        },
        stock: {
            required: true,
            pattern: /^\d+$/,
            min: 0,
            message: 'Stock must be a positive number'
        },
        publication: {
            required: true,
            message: 'Please select a publication'
        },
        regularPrice: {
            required: true,
            pattern: /^\d+(\.\d{1,2})?$/,
            min: 0,
            message: 'Regular price must be a valid positive number'
        },
        salePrice: {
            pattern: /^\d+(\.\d{1,2})?$/,
            min: 0,
            message: 'Sale price must be a valid positive number and less than regular price'
        }
    };

    // Validate single field
    function validateField(field, rules) {
        const value = field.value.trim();
        const errorElement = errorElements[field.id];
        
        // Reset error
        errorElement.textContent = '';
        field.style.borderColor = '';

        // Required check
        if (rules.required && !value) {
            errorElement.textContent = `This field is required`;
            field.style.borderColor = 'red';
            return false;
        }

        // MinLength check
        if (rules.minLength && value.length < rules.minLength) {
            errorElement.textContent = `Minimum ${rules.minLength} characters required`;
            field.style.borderColor = 'red';
            return false;
        }

        // MaxLength check
        if (rules.maxLength && value.length > rules.maxLength) {
            errorElement.textContent = `Maximum ${rules.maxLength} characters allowed`;
            field.style.borderColor = 'red';
            return false;
        }

        // Pattern check
        if (rules.pattern && !rules.pattern.test(value)) {
            errorElement.textContent = rules.message;
            field.style.borderColor = 'red';
            return false;
        }

        // Min value check for numbers
        if (rules.min !== undefined && Number(value) < rules.min) {
            errorElement.textContent = `Value must be greater than or equal to ${rules.min}`;
            field.style.borderColor = 'red';
            return false;
        }

        // Special check for sale price
        if (field.id === 'salePrice' && value) {
            const regularPriceValue = Number(regularPrice.value);
            const salePriceValue = Number(value);
            
            if (salePriceValue <= 0) {
                errorElement.textContent = 'Sale price must be greater than 0';
                field.style.borderColor = 'red';
                return false;
            } else if (salePriceValue >= regularPriceValue) {
                errorElement.textContent = 'Sale price must be less than regular price';
                field.style.borderColor = 'red';
                return false;
            }
        }

        // Validation passed
        field.style.borderColor = '#4CAF50';
        return true;
    }

    // Add input event listeners for real-time validation
    Object.keys(validations).forEach(fieldName => {
        const field = document.getElementById(fieldName);
        field.addEventListener('input', () => {
            validateField(field, validations[fieldName]);
        });
        field.addEventListener('blur', () => {
            validateField(field, validations[fieldName]);
        });
    });

    // Form submit validation
    form.addEventListener('submit', function(e) {
        let isValid = true;
        
        // Validate all fields
        Object.keys(validations).forEach(fieldName => {
            const field = document.getElementById(fieldName);
            if (!validateField(field, validations[fieldName])) {
                isValid = false;
            }
        });

        // Check if at least one image is uploaded
        let hasImage = false;
        for (let i = 0; i < 4; i++) {
            const preview = document.getElementById(`previewContainer${i}`);
            if (preview.querySelector('img')) {
                hasImage = true;
                break;
            }
        }

        if (!hasImage) {
            Swal.fire({
                title: 'No Product Image',
                text: 'Please upload at least one product image.',
                icon: 'warning',
                confirmButtonText: 'OK'
            });
            isValid = false;
        }

        if (!isValid) {
            e.preventDefault();
        }
    });
//same name aano nn check cheyyan
document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form');
    const productNameInput = document.querySelector('input[name="productName"]');
    
    productNameInput.addEventListener('blur', async function() {
        const value = this.value.trim();
        const errorElement = document.getElementById('productNameError');
        
        if (value.length < 3) {
            errorElement.textContent = 'Product name must be at least 3 characters long';
            return;
        }
        
        if (value.length > 50) {
            errorElement.textContent = 'Product name cannot exceed 50 characters';
            return;
        }
        
        try {
            const response = await fetch(`/admin/check-product-name?name=${encodeURIComponent(value)}`);
            const data = await response.json();
            
            if (data.exists) {
                errorElement.textContent = 'This product name already exists';
            } else {
                errorElement.textContent = '';
            }
        } catch (error) {
            console.error('Error checking product name:', error);
        }
    });

    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        const productName = productNameInput.value.trim();
        
        try {
            const response = await fetch(`/admin/check-product-name?name=${encodeURIComponent(productName)}`);
            const data = await response.json();
            
            // if (data.exists) {
            //     alert('A product with this name already exists. Please choose a different name.');
            //     productNameInput.focus();
            //     return;
            // }
            
            // If no duplicate found, submit the form
            this.submit();
        } catch (error) {
            console.error('Error checking product name:', error);
            // In case of error, allow form submission
            this.submit();
        }
    });
});

document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('addProductForm');
    const productNameInput = document.querySelector('input[name="productName"]');
    
    // Form submission handler
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        if (!validateForm()) {
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                text: 'Please check all fields and try again',
                confirmButtonColor: '#a42550'
            });
            return;
        }

        // Show loading state
        const loadingAlert = Swal.fire({
            title: 'Adding Product',
            text: 'Please wait...',
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => {
                Swal.showLoading();
            }
        });

        try {
            // Create FormData object
            const formData = new FormData(this);
            
            // Submit the form using fetch
            const response = await fetch("/admin/addProduct", {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            console.log('Server response:', result);

            // Close loading alert
            loadingAlert.close();

            if (result.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Product added successfully',
                    confirmButtonColor: '#4caf50'
                });
                window.location.href = '/admin/productview';
            } else {
                throw new Error(result.message || 'Failed to add product');
            }
        } catch (error) {
            console.error('Error:', error);
            loadingAlert.close();
            
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Something went wrong. Please try again.',
                confirmButtonColor: '#dc3545'
            });
        }
    });

    function validateForm() {
        let isValid = true;
        
        // Clear all previous errors
        clearAllErrors();

        // Get form values
        const productName = document.getElementById('productName').value.trim();
        const description = document.getElementById('description').value.trim();
        const category = document.getElementById('category').value;
        const publication = document.getElementById('publication').value;
        const stock = document.getElementById('stock').value;
        const regularPrice = document.getElementById('regularPrice').value;
        const salePrice = document.getElementById('salePrice').value;

        // Validate product name
        if (!productName || productName.length < 3 || productName.length > 50) {
            showError('productNameError', 'Product name must be between 3 and 50 characters');
            isValid = false;
        }

        // Validate description
        if (!description || description.length < 10) {
            showError('descriptionError', 'Description must be at least 10 characters long');
            isValid = false;
        }

        // Validate category
        if (!category) {
            showError('categoryError', 'Please select a category');
            isValid = false;
        }

        // Validate publication
        if (!publication) {
            showError('publicationError', 'Please select a publication');
            isValid = false;
        }

        // Validate stock
        if (!stock || isNaN(stock) || parseInt(stock) < 0) {
            showError('stockError', 'Stock quantity must be 0 or greater');
            isValid = false;
        }

        // Validate regular price
        if (!regularPrice || isNaN(regularPrice) || parseFloat(regularPrice) <= 0) {
            showError('regularPriceError', 'Regular price must be greater than 0');
            isValid = false;
        }

        // Validate sale price if provided
        if (salePrice && !isNaN(salePrice)) {
            const saleValue = parseFloat(salePrice);
            const regularValue = parseFloat(regularPrice);
            
            if (saleValue <= 0) {
                showError('salePriceError', 'Sale price must be greater than 0');
                isValid = false;
            } else if (saleValue >= regularValue) {
                showError('salePriceError', 'Sale price must be less than regular price');
                isValid = false;
            }
        }

        // Validate at least one image is selected
        const imageInputs = document.querySelectorAll('input[type="file"]');
        let hasImage = false;
        imageInputs.forEach(input => {
            if (input.files && input.files.length > 0) hasImage = true;
        });

        if (!hasImage) {
            Swal.fire({
                icon: 'error',
                title: 'Image Required',
                text: 'Please add at least one product image',
                confirmButtonColor: '#dc3545'
            });
            isValid = false;
        }

        return isValid;
    }

    function showError(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.color = '#dc3545';
            errorElement.style.fontSize = '12px';
            errorElement.style.marginTop = '5px';
        }
    }

    function clearAllErrors() {
        const errorElements = document.querySelectorAll('[id$="Error"]');
        errorElements.forEach(element => {
            element.textContent = '';
        });
    }

    // Real-time product name validation
    productNameInput.addEventListener('input', async function() {
        const value = this.value.trim();
        const errorElement = document.getElementById('productNameError');
        
        if (value.length < 3) {
            errorElement.textContent = 'Product name must be at least 3 characters long';
            return;
        }
        
        if (value.length > 50) {
            errorElement.textContent = 'Product name cannot exceed 50 characters';
            return;
        }
        
        try {
            const response = await fetch(`/admin/checkProductName?name=${encodeURIComponent(value)}`);
            const data = await response.json();
            
            if (data.exists) {
                errorElement.textContent = 'This product name already exists';
            } else {
                errorElement.textContent = '';
            }
        } catch (error) {
            console.error('Error checking product name:', error);
        }
    });

    // Image preview and deletion
    function handleDelete(index) {
        Swal.fire({
            title: 'Remove Image?',
            text: 'Are you sure you want to remove this image?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, remove it!'
        }).then((result) => {
            if (result.isConfirmed) {
                const previewContainer = document.getElementById(`previewContainer${index}`);
                const imageInput = document.getElementById(`imageInput${index}`);
                
                previewContainer.innerHTML = '<span>Add Image</span>';
                imageInput.value = '';
                
                Swal.fire({
                    icon: 'success',
                    title: 'Removed!',
                    text: 'The image has been removed.',
                    timer: 1500,
                    showConfirmButton: false
                });
            }
        });
    }
});
</script>

<%- include("../../views/partials/admin/footer") %>
</body>
</html>